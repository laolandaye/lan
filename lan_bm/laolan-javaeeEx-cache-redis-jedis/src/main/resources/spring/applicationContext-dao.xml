<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">


	<!-- 2.数据源 -->
	<!-- 2.1 引入-->
	<!--<context:property-placeholder location="classpath*:./db.properties" />-->

	<!--加载配置文件资源,代码中可使用@Value方式绑定配置文件中的数据-->
	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath*:./db.properties</value>
			</list>
		</property>
	</bean>

	<!--PropertyPlaceholderConfigurer的子类,功能类似-->
	<bean id="property" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
		<property name="properties" ref="configProperties" />
	</bean>

	<!-- 2.2 加载 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="url" value="${jdbc.url}"></property>
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>

		<property name="maxActive" value="10" />
		<property name="minIdle" value="5" />
	</bean>

	<!-- 3.sqlSessionFactory 配置和MyBatis的整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 3.1注入数据源 -->
		<property name="dataSource" ref="dataSource"></property>

		<!-- 3.2  指定mybatis   全局配置文件  -->
		<property name="configLocation" value="classpath:./mybatis/SqlMapConfig.xml"/>

		<!-- 3.3指定mybatis，mapper文件的位置 -->
		<!--<property name="mapperLocations" value="classpath:mapper/*.xml"></property>-->
	</bean>

	<!-- 4. 配置mybatis扫描器， -->
	<!-- 4.1 将mybatis接口的实现加入到ioc容器中  dao接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.e3mall.mapper"></property>
		<!-- 使用sqlSessionFactoryBeanName -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<!-- 4.2  (可选)配置一个可以执行批量的sqlSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>

</beans>