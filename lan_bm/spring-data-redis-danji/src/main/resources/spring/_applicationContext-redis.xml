<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cache="http://www.springframework.org/schema/cache"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">

	<!-- 连接池配置. -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 连接池中最大连接数。高版本：maxTotal，低版本：maxActive -->
		<property name="maxTotal" value="8" />
		<!-- 连接池中最大空闲的连接数. -->
		<property name="maxIdle" value="8" />
		<!-- 连接池中最少空闲的连接数. -->
		<property name="minIdle" value="${spring.redis.minIdle}" />
		<!-- 当连接池资源耗尽时，调用者最大阻塞的时间，超时将跑出异常。单位，毫秒数;默认为-1.表示永不超时。高版本：maxWaitMillis，低版本：maxWait -->
		<property name="maxWaitMillis" value="${spring.redis.maxWaitMillis}" />
		<!-- 连接空闲的最小时间，达到此值后空闲连接将可能会被移除。负值(-1)表示不移除. -->
		<property name="minEvictableIdleTimeMillis" value="${spring.redis.minEvictableIdleTimeMillis}" />
		<!-- 对于“空闲链接”检测线程而言，每次检测的链接资源的个数。默认为3 -->
		<property name="numTestsPerEvictionRun" value="${spring.redis.numTestsPerEvictionRun}" />
		<!-- “空闲链接”检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1. -->
		<property name="timeBetweenEvictionRunsMillis" value="${spring.redis.timeBetweenEvictionRunsMillis}" />
		<!-- testOnBorrow:向调用者输出“链接”资源时，是否检测是有有效，如果无效则从连接池中移除，并尝试获取继续获取。默认为false。建议保持默认值. -->
		<!-- testOnReturn:向连接池“归还”链接时，是否检测“链接”对象的有效性。默认为false。建议保持默认值. -->
		<!-- testWhileIdle:向调用者输出“链接”对象时，是否检测它的空闲超时；默认为false。如果“链接”空闲超时，将会被移除。建议保持默认值. -->
		<!-- whenExhaustedAction:当“连接池”中active数量达到阀值时，即“链接”资源耗尽时，连接池需要采取的手段, 默认为1(0:抛出异常。1:阻塞，直到有可用链接资源。2:强制创建新的链接资源) -->
	</bean>

	<!-- Spring提供的Redis连接工厂 -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<!-- Redis服务主机. -->
		<property name="hostName" value="${spring.redis.hostName}" />
		<!-- Redis服务端口号. -->
		<property name="port" value="${spring.redis.port}" />
		<!-- Redis服务连接密码. -->
		<property name="password" value="${spring.redis.password}" />
		<!-- 连超时设置. -->
		<property name="timeout" value="${spring.redis.timeout}" />
		<!-- 是否使用连接池. -->
		<property name="usePool" value="${spring.redis.usePool}" />
		<!--  注入连接池配置. -->
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>

	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<!-- 开启事务 -->
		<property name="enableTransactionSupport" value="true"></property>
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
			 <!--<bean class="org.springframework.data.redis.serializer.JacksonJsonRedisSerializer" />-->
		</property>
	</bean>

	<!-- Spring提供的访问Redis类. -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<!-- 开启事务 -->
		<property name="enableTransactionSupport" value="true"></property>

		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>

		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
			<!-- <bean class="com.alibaba.fastjson.support.spring.GenericFastJsonRedisSerializer"/>
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" /> -->
		</property>

		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>

		<property name="hashValueSerializer">
        	<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
	</bean>


	<!-- 不使用就需要注解掉，如果配置了启用注解注释，就必须要配置cacheManager 否则就会启动报错。因为配置了这个缓存拦截器就会去注入cacheManager -->
	<cache:annotation-driven cache-manager="stringRedisCacheManager" />

	<!-- 这里面可以配置上面分析的各种字段属性-->
	<bean id="stringRedisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<!--配置 redisTemplate-->
		<constructor-arg index = "0" type="org.springframework.data.redis.core.RedisOperations">
			<ref bean="stringRedisTemplate" />
		</constructor-arg>
		<!-- 过期时间 -->
		<property name="defaultExpiration" value="300000"/>
		<!--    支持事务 -->
		<property name="transactionAware" value = "true"/>
	</bean>

	<!-- 这里面可以配置上面分析的各种字段属性-->
	<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<!--配置 redisTemplate-->
		<constructor-arg index = "0" type="org.springframework.data.redis.core.RedisOperations">
			<ref bean="redisTemplate" />
		</constructor-arg>
		<!-- 过期时间 -->
		<property name="defaultExpiration" value="300000"/>
		<!--    支持事务 -->
		<property name="transactionAware" value = "true"/>
	</bean>

</beans>